/*
   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public
   License version 2 as published by the Free Software Foundation.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public License
   along with this library; see the file COPYING.LIB.  If not, write to
   the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.
*/

#include <KDChartChart>
#include <KDChartAbstractCoordinatePlane>
#include <KDChartLineDiagram>

#include <KLocalizedString>
#include <KAboutData>
#include <KApplication>
#include <KCmdLineArgs>
#include <KCmdLineOptions>

#include <QStandardItemModel>

#include <time.h>
#include <KDChartGridAttributes>
#include <KDChartBarDiagram.h>
#include <KDChartFrameAttributes>
#include <KDChartHeaderFooter>
#include <KDChartLegend>

int main( int argc, char *argv[] )
{
    KAboutData aboutData( "massif-visualizer", 0, ki18n( "Massif Visualizer" ),
                          i18n("0.1").toUtf8(), ki18n("A visualizer for output generated by Valgrind's massif tool."), KAboutData::License_LGPL,
                          ki18n( "Copyright 2010, Milian Wolff <mail@milianw.de>" ) );

    KCmdLineArgs::init( argc, argv, &aboutData, KCmdLineArgs::CmdLineArgNone );
    KCmdLineOptions options;
    options.add("f <file>", ki18n("Open given output file and visualize it."));

    KCmdLineArgs::addCmdLineOptions( options );
    KCmdLineArgs* args = KCmdLineArgs::parsedArgs();
    KApplication app;

    KDChart::Chart* chart = new KDChart::Chart();
    KDChart::AbstractDiagram* diagram = new KDChart::LineDiagram();
    diagram->setBrush(QBrush(Qt::red));
    qDebug() << diagram->brush().color().name();
    QStandardItemModel* model = new QStandardItemModel(chart);
    qsrand(time(NULL));
    for ( int i = 0; i < 100; ++i ) {
        QList<QStandardItem*> items;
        items << new QStandardItem(QString::number(i)) << new QStandardItem(QString::number(qrand()));
        model->appendRow(items);
    }
    diagram->setModel(model);
    chart->coordinatePlane()->addDiagram(diagram);
    diagram = new KDChart::BarDiagram();
    diagram->setBrush(QBrush(Qt::yellow));
    qDebug() << diagram->brush().color().name();
    diagram->setModel(model);
    chart->coordinatePlane()->addDiagram(diagram);

    chart->coordinatePlane()->setRubberBandZoomingEnabled(true);
    chart->coordinatePlane()->globalGridAttributes().setSubGridVisible(true);

    chart->addHeaderFooter(new KDChart::HeaderFooter);
    chart->headerFooter()->setText(i18n("test"));

    chart->addLegend(new KDChart::Legend);
    chart->legend()->setTitleText(i18n("some legend"));
    chart->legend()->addDiagram(chart->coordinatePlane()->diagrams().first());
//     chart->legend()->addDiagram(chart->coordinatePlane()->diagrams().last());

    chart->show();
    return app.exec();
}
